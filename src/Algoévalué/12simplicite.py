
def RLE(chaine):
    if len(chaine) == 0:
        return ""

    resultat = ""
    compteur = 1
    premier_caractere = chaine[0]
    longueur = len(chaine)

    for i in range(1, longueur):
        if chaine[i] == premier_caractere:
            compteur += 1
            if compteur == 9:
                resultat += str(compteur) + premier_caractere
                compteur = 0
        else:
            if compteur > 0:
                resultat += str(compteur) + premier_caractere
            premier_caractere = chaine[i]
            compteur = 1

    if compteur > 0:
        resultat += str(compteur) + premier_caractere

    return resultat


def unRLE(chaine):
    resultat = ""
    i = 0
    longueur = len(chaine)

    while i < longueur:
        caractere = chaine[i]

        if caractere.isdigit():
            nombre = int(caractere)
            caractere_suivant = chaine[i + 1]
            resultat += nombre * caractere_suivant
            i += 2
        else:
            resultat += caractere
            i += 1

    return resultat

def unRLEit(chaine, iteration):
    resultat = chaine
    for i in range(iteration):
        resultat = unRLE(resultat)
    return resultat

def RLEit(chaine, iteration):
    resultat = chaine
    for i in range(iteration):
        resultat = RLE(resultat)
    return resultat


#TEST RLE 
assert RLE("") == ""
assert RLE("abc") == "1a1b1c"
assert RLE("abbccc") == "1a2b3c"
assert RLE("aaabaa") == "3a1b2a"
assert RLE("aAa") == "1a1A1a"
assert RLE("WWWWWWWWWWWWW") == "9W4W"

print("===============\nTest RLE passé ")

#TEST RLEit
assert RLEit("", 1) == ""
assert RLEit("", 3) == ""
assert RLEit("abc", 1) == "1a1b1c"
assert RLEit("abbccc", 1) == "1a2b3c"
assert RLEit("aaabaa", 1) == "3a1b2a"
assert RLEit("aAa", 1) == "1a1A1a"
assert RLEit("abc", 2) == "111a111b111c"
assert RLEit("abc", 3) == "311a311b311c"
saeIte20="1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211S1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211A1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211E1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211 1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211A1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211l1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211g1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211o"
assert RLEit("SAE Algo", 20) == saeIte20
print("===============\nTest RLE-rec passé ")
        

#TEST unRLE
assert unRLE("")==""
assert unRLE("1a1b1c")=="abc"
assert unRLE("1a2b3c")=="abbccc"
assert unRLE("3a1b2a")=="aaabaa"
assert unRLE("1a1A1a")=="aAa"
assert unRLE("9W4W") == "WWWWWWWWWWWWW"
print("===============\nTest unRle passé ")

#TEST unRLEit
assert unRLEit("", 1) == ""
assert unRLEit("", 3) == ""
assert unRLEit("1a1b1c", 1) == "abc"
assert unRLEit("1a2b3c", 1) == "abbccc"
assert unRLEit("3a1b2a", 1) == "aaabaa"
assert unRLEit("1a1A1a", 1) == "aAa"
assert unRLEit("111a111b111c", 2) == "abc"
assert unRLEit("311a311b311c", 3) == "abc"
print("===============\nTest unRle_rec passé ")


#MES TESTS
# Pour les tests RLE
assert RLE("xxxxx") == "5x"
assert RLE("aAaAaA") == "1a1A1a1A1a1A"
assert RLE("abcd") == "1a1b1c1d"
assert RLE("abbaaacc") == "1a2b3a2c"
assert RLE("a") == "1a"
# Pour les tests unRLE
assert unRLE("5x") == "xxxxx"
assert unRLE("1a1A1a1A1a1A") == "aAaAaA"
assert unRLE("1a1b1c1d") == "abcd"
assert unRLE("2a2b3a2c") == "aabbaaacc"
assert unRLE("1a") == "a"
assert unRLE("2a2b2c2d") == "aabbccdd"
# Pour les tests unRLE récursif
assert unRLEit("151x", 2) == "xxxxx"
assert unRLEit("111a111b111c111d", 2) == "abcd"
# Pour les tests RLE récursif
assert RLEit("xxxxx", 2) == "151x"
assert RLEit("abcd", 2) == "111a111b111c111d"
print("===============\nTous mes tests sont passés.")

