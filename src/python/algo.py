def RLE(chaine :str ) -> str:
    nvlchaine = ""
    cpt = 1
    for i in range(len(chaine)):
        if i<len(chaine)-1 and chaine[i] == chaine[i+1] and cpt<9: 
            cpt=cpt+1
        else :
            nvlchaine = nvlchaine + str(cpt) + chaine[i]
            cpt = 1
    return nvlchaine



def RLEit(chaine :str, iteration:int) -> str:
    if iteration != 1 :
        nvlchaine = RLE(chaine)
        return RLEit(nvlchaine,iteration-1)
    return RLE(chaine)
    


def unRLE(chaine : str)->str:
    nvlchaine = ""
    for i in range(0,len(chaine),2):
        nvlchaine = nvlchaine + int(chaine[i])*chaine[i+1]    
    return nvlchaine


def unRLEit(chaine :str, iteration:int) -> str:
    if iteration != 1 :
        nvlchaine = unRLE(chaine)
        return unRLEit(nvlchaine,iteration-1)
    return unRLE(chaine)




#TEST RLE 
assert RLE("") == ""
assert RLE("abc") == "1a1b1c"
assert RLE("abbccc") == "1a2b3c"
assert RLE("aaabaa") == "3a1b2a"
assert RLE("aAa") == "1a1A1a"

#TEST RLEit
assert RLEit("", 1) == ""
assert RLEit("", 3) == ""
assert RLEit("abc", 1) == "1a1b1c"
assert RLEit("abbccc", 1) == "1a2b3c"
assert RLEit("aaabaa", 1) == "3a1b2a"
assert RLEit("aAa", 1) == "1a1A1a"
assert RLEit("abc", 2) == "111a111b111c"
assert RLEit("abc", 3) == "311a311b311c"
saeItel1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211g1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211o"
assert RLEit("SAE Algo", 20) == saeIte20
        

#TEST unRLE
assert unRLE("")==""
assert unRLE("1a1b1c")=="abc"
assert unRLE("1a2b3c")=="abbccc"
assert unRLE("3a1b2a")=="aaabaa"
assert unRLE("1a1A1a")=="aAa"

#TEST unRLEit
assert unRLEit("", 1) == ""
assert unRLEit("", 3) == ""
assert unRLEit("1a1b1c", 1) == "abc"
assert unRLEit("1a2b3c", 1) == "abbccc"
assert unRLEit("3a1b2a", 1) == "aaabaa"
assert unRLEit("1a1A1a", 1) == "aAa"
assert unRLEit("111a111b111c", 2) == "abc"
assert unRLEit("311a311b311c", 3) == "abc"