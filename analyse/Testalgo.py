#TEST RLE 
assert RLE("") == ""
assert RLE("abc") == "1a1b1c"
assert RLE("abbccc") == "1a2b3c"
assert RLE("aaabaa") == "3a1b2a"
assert RLE("aAa") == "1a1A1a"
assert RLE("WWWWWWWWWWWWW") == "9W4W"

print("===============\nTest RLE passé ")

#TEST RLE récurcif
assert RLE_rec("", 1) == ""
assert RLE_rec("", 3) == ""
assert RLE_rec("abc", 1) == "1a1b1c"
assert RLE_rec("abbccc", 1) == "1a2b3c"
assert RLE_rec("aaabaa", 1) == "3a1b2a"
assert RLE_rec("aAa", 1) == "1a1A1a"
assert RLE_rec("abc", 2) == "111a111b111c"
assert RLE_rec("abc", 3) == "311a311b311c"
saeItel1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211g1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211o"
assert RLE_rec("SAE Algo", 20) == saeIte20
print("===============\nTest RLE-rec passé ")
        

#TEST unRLE
assert unRLE("")==""
assert unRLE("1a1b1c")=="abc"
assert unRLE("1a2b3c")=="abbccc"
assert unRLE("3a1b2a")=="aaabaa"
assert unRLE("1a1A1a")=="aAa"
assert unRLE("9W4W") == "WWWWWWWWWWWWW"
print("===============\nTest unRle passé ")

#TEST unRLE_rec
assert unRLE_rec("", 1) == ""
assert unRLE_rec("", 3) == ""
assert unRLE_rec("1a1b1c", 1) == "abc"
assert unRLE_rec("1a2b3c", 1) == "abbccc"
assert unRLE_rec("3a1b2a", 1) == "aaabaa"
assert unRLE_rec("1a1A1a", 1) == "aAa"
assert unRLE_rec("111a111b111c", 2) == "abc"
assert unRLE_rec("311a311b311c", 3) == "abc"
print("===============\nTest unRle_rec passé ")


#MES TESTS
# Pour les tests RLE
assert RLE("xxxxx") == "5x"
assert RLE("aAaAaA") == "1a1A1a1A1a1A"
assert RLE("abcd") == "1a1b1c1d"
assert RLE("abbaaacc") == "1a2b3a2c"
assert RLE("a") == "1a"
# Pour les tests unRLE
assert unRLE("5x") == "xxxxx"
assert unRLE("1a1A1a1A1a1A") == "aAaAaA"
assert unRLE("1a1b1c1d") == "abcd"
assert unRLE("2a2b3a2c") == "aabbaaacc"
assert unRLE("1a") == "a"
assert unRLE("2a2b2c2d") == "aabbccdd"
# Pour les tests unRLE récursif
assert unRLE_rec("151x", 2) == "xxxxx"
assert unRLE_rec("111a111b111c111d", 2) == "abcd"
# Pour les tests RLE récursif
assert RLE_rec("xxxxx", 2) == "151x"
assert RLE_rec("abcd", 2) == "111a111b111c111d"
print("===============\nTous mes tests sont passés.")
 

